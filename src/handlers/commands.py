from datetime import timezone, datetime
from aiogram import F, Router, types
from aiogram.filters import Command
from sqlalchemy import select
import sqlalchemy
from src.models import AvitoAccount
from src.database.connector import db
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

from src.models.manager import Manager


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


router = Router()

@router.message(Command("accounts"))
async def handle_accounts_command(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    async with db.session_factory() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            result = await session.execute(
                select(Manager)
                .where(Manager.telegram_id == message.from_user.id)
            )
            manager = result.scalar_one_or_none()

            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not manager:
                try:
                    manager = Manager(telegram_id=message.from_user.id)
                    session.add(manager)
                    await session.commit()
                except sqlalchemy.exc.IntegrityError:
                    await session.rollback()
                    result = await session.execute(
                        select(Manager)
                        .where(Manager.telegram_id == message.from_user.id)
                    )
                    manager = result.scalar_one_or_none()

            if not manager:
                return await message.answer("üö´ –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é accounts
            accounts = []
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
            result = await session.execute(
                select(AvitoAccount)
                .where(AvitoAccount.manager_id == manager.id)
            )
            accounts = result.scalars().all()  # –¢–µ–ø–µ—Ä—å accounts –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∫–æ–º

            if not accounts:
                return await message.answer("üö´ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            builder = InlineKeyboardBuilder()
            text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n\n"
            
            for i, acc in enumerate(accounts, 1):
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if acc.expires_at > datetime.now(timezone.utc) else "‚ùå –ò—Å—Ç–µ–∫"
                text += (
                    f"{i}. {acc.account_name}\n"
                    f"ID: {acc.id}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}\n"
                    f"–î–æ–±–∞–≤–ª–µ–Ω: {acc.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                )
                
                builder.button(
                    text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {acc.id}", 
                    callback_data=f"delete_account_{acc.id}"
                )

            builder.adjust(2)
            await message.answer(
                text,
                reply_markup=builder.as_markup()
            )

        except Exception as e:
            logger.error(f"Error in accounts command: {str(e)}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")


@router.callback_query(F.data.startswith("delete_account_"))
async def handle_delete_account(callback: types.CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback_data
        account_id_str = callback.data.removeprefix("delete_account_")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID - —á–∏—Å–ª–æ
        if not account_id_str.isdigit():
            await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞")
            return
            
        account_id = int(account_id_str)

        async with db.session_factory() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            result = await session.execute(
                select(AvitoAccount)
                .join(Manager)
                .where(
                    AvitoAccount.id == account_id,
                    Manager.telegram_id == callback.from_user.id
                )
            )
            account = result.scalar_one_or_none()

            if not account:
                await callback.answer("‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                return

            # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
            account_name = account.account_name
            await session.delete(account)
            await session.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:\n{account_name} (ID: {account_id})",
                reply_markup=None
            )
            await callback.answer()

    except ValueError as ve:
        logger.error(f"Value error in delete account: {ve}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"Error deleting account: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")