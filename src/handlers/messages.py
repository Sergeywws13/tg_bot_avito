from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, desc
from src.services.avito_api import AvitoAPI, AvitoAPIError
from src.models import AvitoAccount, AvitoChat, Manager
from datetime import datetime
import logging

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("chats"))
async def handle_chats_command(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —á–∞—Ç—ã –∏–∑ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(AvitoAccount)
            .join(Manager)
            .where(Manager.telegram_id == message.from_user.id)
        )
        accounts = result.scalars().all()

        if not accounts:
            return await message.answer("üö´ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —á–∞—Ç—ã –∏–∑ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        all_chats = []
        for account in accounts:
            api = AvitoAPI(account.access_token)
            try:
                chats = await api.get_unread_chats()
                for chat in chats:
                    chat['account_name'] = account.account_name  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
                    all_chats.append(chat)
            except AvitoAPIError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id}: {str(e)}")
                continue

        if not all_chats:
            return await message.answer("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∞—Ç–∞–º–∏
        response = []
        for chat in all_chats:
            last_msg = chat.get('last_message', {})
            response.append(
                f"üí¨ –ß–∞—Ç ID: {chat['id']}\n"
                f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ: {last_msg.get('content', {}).get('text', '')[:50]}...\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {chat.get('client_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {chat.get('client_phone', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üïí –í—Ä–µ–º—è: {chat['updated']}\n"
                f"üìÇ –ê–∫–∫–∞—É–Ω—Ç: {chat['account_name']}\n"
            )

        await message.answer("–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Avito:\n" + "\n\n".join(response))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")

@router.message(F.reply_to_message)
async def handle_reply(message: Message, session: AsyncSession):
    """–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏–∑ –æ—Ç–≤–µ—Ç–∞
        original_text = message.reply_to_message.text
        chat_id = original_text.split("–ß–∞—Ç ID: ")[1].split("\n")[0].strip()

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        result = await session.execute(
            select(AvitoAccount)
            .join(Manager)
            .where(Manager.telegram_id == message.from_user.id)
        )
        account = result.scalars().first()

        if not account:
            return await message.answer("üö´ –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        api = AvitoAPI(account.access_token)
        await api.send_message(chat_id, message.text)
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    except AvitoAPIError as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
    except Exception as e:
        logger.error(f"Reply error: {str(e)}")
        await message.answer("üö´ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞")