from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from src.services.auth import check_token_validity, refresh_avito_token
from src.services.avito_api import AvitoAPI, AvitoAPIError
from src.models import AvitoAccount, Manager

import logging

router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("messages"))
async def handle_chats_command(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        result = await session.execute(
            select(AvitoAccount)
            .join(Manager)
            .where(Manager.telegram_id == message.from_user.id)
        )
        accounts = result.scalars().all()

        if not accounts:
            return await message.answer("üö´ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        all_messages = []
        for account in accounts:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º API
            if not await check_token_validity(account.access_token):
                logger.info("–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º...")
                try:
                    new_tokens = await refresh_avito_token(account.refresh_token, account.id)
                    account.access_token = new_tokens['access_token']
                    account.refresh_token = new_tokens.get('refresh_token', account.refresh_token)
                    await session.commit()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {str(e)}")
                    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω")
                    continue

            # –°–æ–∑–¥–∞–µ–º API —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
            api = AvitoAPI(account.access_token)

            try:
                # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                chats = (await api.get_unread_chats()).get("chats", [])
                for chat in chats:
                    messages = (await api.get_unread_messages(chat["id"])).get("messages", [])
                    for msg in messages:
                        all_messages.append({
                            "content": msg.get("text", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"),
                            "chat_id": chat["id"],
                            "account": account.account_name
                        })

            except AvitoAPIError as e:
                logger.error(f"–û—à–∏–±–∫–∞ API: {str(e)}")
                continue

        if not all_messages:
            return await message.answer("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

        response = [
            f"üí¨ –ß–∞—Ç ID: {msg['chat_id']}\n"
            f"üì© {msg['content'][:100]}\n"
            f"üîó –ê–∫–∫–∞—É–Ω—Ç: {msg['account']}\n"
            for msg in all_messages
        ]

        await message.answer("üì® –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n" + "\n\n".join(response))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(F.reply_to_message)
async def handle_reply(message: Message, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        original = message.reply_to_message.text
        chat_id = None
        for line in original.split("\n"):
            if line.startswith("üí¨ –ß–∞—Ç ID: "):
                chat_id = line.split("üí¨ –ß–∞—Ç ID: ")[1].strip()
                break
        
        if not chat_id:
            return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        result = await session.execute(
            select(AvitoAccount)
            .join(Manager)
            .where(Manager.telegram_id == message.from_user.id)
        )
        account = result.scalars().first()

        if not account:
            return await message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        api = AvitoAPI(account.access_token)
        if not await check_token_validity(account.access_token):
            new_tokens = await refresh_avito_token(account.refresh_token)
            account.access_token = new_tokens['access_token']
            account.refresh_token = new_tokens.get('refresh_token', account.refresh_token)
            await session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await api.send_message(chat_id, message.text)
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except AvitoAPIError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ Avito: {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")

        