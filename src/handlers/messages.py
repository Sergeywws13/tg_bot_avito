from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from src.services.auth import check_token_validity, refresh_avito_token
from src.services.avito_api import AvitoAPI, AvitoAPIError
from src.models import AvitoAccount, Manager

import logging

router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("messages"))
async def handle_chats_command(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        result = await session.execute(
            select(AvitoAccount)
            .join(Manager)
            .where(Manager.telegram_id == message.from_user.id)
        )
        accounts = result.scalars().all()

        if not accounts:
            return await message.answer("üö´ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        all_messages = []
        for account in accounts:
            api = AvitoAPI(account.access_token)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
            if not await check_token_validity(account.access_token):
                logger.info("–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º...")
                try:
                    new_tokens = await refresh_avito_token(account.refresh_token)
                    account.access_token = new_tokens['access_token']
                    account.refresh_token = new_tokens.get('refresh_token', account.refresh_token)
                    await session.commit()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id}: {str(e)}")
                    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.")
                    return

            try:
                messages = await api.get_unread_messages()
                for msg in messages:
                    msg['account_name'] = account.account_name
                    all_messages.append(msg)
            except AvitoAPIError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id}: {str(e)}")
                continue

        if not all_messages:
            return await message.answer("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

        response = []
        for msg in all_messages:
            response.append(
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ ID: {msg['id']}\n"
                f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ: {msg['content'][:50]}\n"
                f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ: {msg['content'][:50]}...\n"
                f"üìÇ –ê–∫–∫–∞—É–Ω—Ç: {msg['account_name']}\n"
            )

        await message.answer("–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Avito:\n" + "\n\n".join(response))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")


@router.message(F.reply_to_message)
async def handle_reply(message: Message, session: AsyncSession):
    """–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏–∑ –æ—Ç–≤–µ—Ç–∞
        original_text = message.reply_to_message.text
        if "–ß–∞—Ç ID: " not in original_text:
            return await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")

        chat_id = original_text.split("–ß–∞—Ç ID: ")[1].split("\n")[0].strip()

        result = await session.execute(
            select(AvitoAccount)
            .join(Manager)
            .where(Manager.telegram_id == message.from_user.id)
        )
        account = result.scalars().first()

        if not account:
            return await message.answer("üö´ –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        api = AvitoAPI(account.access_token)

        if not await check_token_validity(account.access_token):
            logger.info("–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º...")
            new_tokens = await refresh_avito_token(account.refresh_token)
            account.access_token = new_tokens['access_token']
            account.refresh_token = new_tokens.get('refresh_token', account.refresh_token)
            await session.commit()

        await api.send_message(chat_id, message.text)
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    except AvitoAPIError as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
    except Exception as e:
        logger.error(f"Reply error: {str(e)}")
        await message.answer("üö´ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞")