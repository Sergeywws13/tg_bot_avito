import os
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from src.services.auth import get_access_token
from src.utils.crypto import encrypt_token
from src.database.connector import db

router = Router()


@router.message(Command("auth"))
async def start_auth(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /auth –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ê–≤–∏—Ç–æ.
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_url = (
        "https://avito.ru/oauth?"
        f"client_id={os.getenv('CLIENT_ID')}&"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CLIENT_ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        f"response_type=code&"
        f"redirect_uri={os.getenv('REDIRECT_URI')}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º REDIRECT_URI –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π
    builder = InlineKeyboardBuilder()
    builder.button(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ê–≤–∏—Ç–æ", url=auth_url)
    builder.adjust(1)

    await message.answer(
        "üîë –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ê–≤–∏—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=builder.as_markup(),
    )


@router.message(Command("handle_callback"))
async def handle_callback(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Flask-—Å–µ—Ä–≤–µ—Ä–∞.
    """
    code = message.text 

    try:
        tokens = await get_access_token(code)
        access_token = tokens["access_token"]
        refresh_token = tokens["refresh_token"]


        encrypted_token = encrypt_token(access_token)


        async with (await db.get_pool()).acquire() as conn:
            await conn.execute(
                "INSERT INTO avito_accounts (account_name, access_token, refresh_token, manager_id) "
                "VALUES ($1, $2, $3, $4)",
                "–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", encrypted_token, refresh_token, message.from_user.id
            )

        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        